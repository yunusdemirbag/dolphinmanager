import { NextRequest, NextResponse } from 'next/server';
import { adminDb, initializeAdminApp } from '@/lib/firebase-admin';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

interface CategoryMatch {
  category_id: number;
  category_name: string;
  confidence: number;
  reasoning: string;
}

export async function POST(request: NextRequest) {
  try {
    const { title, shopId } = await request.json();
    
    if (!title || !shopId) {
      return NextResponse.json({ error: 'Title ve shopId gerekli' }, { status: 400 });
    }

    console.log(`üß† AI kategori e≈üle≈ütirme ba≈ülƒ±yor - Title: "${title}", ShopId: ${shopId}`);
    
    initializeAdminApp();
    if (!adminDb) {
      throw new Error('Firebase Admin ba≈ülatƒ±lamadƒ±');
    }

    // 1. Canvas kategorilerini cache'den al
    const canvasCategoriesDoc = await adminDb.collection('canvas_categories').doc(shopId).get();
    
    if (!canvasCategoriesDoc.exists) {
      console.log('‚ö†Ô∏è Canvas kategorileri cache\'de yok, otomatik setup tetikleniyor...');
      
      // Auto setup'ƒ± tetikle
      const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';
      await fetch(`${baseUrl}/api/etsy/auto-setup-store`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ shopId })
      });
      
      return NextResponse.json({ 
        error: 'Canvas kategorileri y√ºkleniyor, l√ºtfen birka√ß saniye bekleyip tekrar deneyin.',
        code: 'CATEGORIES_LOADING'
      }, { status: 202 });
    }

    const canvasData = canvasCategoriesDoc.data()!;
    const canvasCategories = canvasData.categories || [];
    
    if (canvasCategories.length === 0) {
      return NextResponse.json({ error: 'Canvas kategorileri bulunamadƒ±' }, { status: 404 });
    }

    console.log(`üìã ${canvasCategories.length} Canvas kategorisi bulundu, AI analizi ba≈ülƒ±yor...`);

    // 2. AI ile kategori e≈üle≈ütirme
    const categoryMatch = await matchCategoryWithAI(title, canvasCategories);
    
    if (!categoryMatch) {
      return NextResponse.json({ error: 'Uygun kategori bulunamadƒ±' }, { status: 404 });
    }

    // 3. Sonucu kaydet (√∂ƒürenme i√ßin)
    await saveCategoryMatchResult(shopId, title, categoryMatch);
    
    return NextResponse.json({
      success: true,
      match: categoryMatch,
      availableCategories: canvasCategories.length
    });

  } catch (error) {
    console.error('‚ùå AI kategori e≈üle≈ütirme hatasƒ±:', error);
    return NextResponse.json(
      { error: 'Kategori e≈üle≈ütirme ba≈üarƒ±sƒ±z: ' + (error instanceof Error ? error.message : 'Bilinmeyen hata') },
      { status: 500 }
    );
  }
}

async function matchCategoryWithAI(title: string, categories: any[]): Promise<CategoryMatch | null> {
  try {
    const categoryList = categories.map(cat => `${cat.id}: ${cat.name}`).join('\n');
    
    const prompt = `
# CANVAS WALL ART KATEGORI E≈ûLE≈ûTƒ∞RME

## √úR√úN BA≈ûLIƒûI
"${title}"

## MEVCUT CANVAS KATEGORƒ∞LERƒ∞
${categoryList}

## G√ñREV
Yukarƒ±daki √ºr√ºn ba≈ülƒ±ƒüƒ±nƒ± analiz et ve en uygun Canvas/Wall Art kategorisini se√ß.

## KRƒ∞TERLER
1. Ba≈ülƒ±ktaki anahtar kelimeler (canvas, wall art, print, painting, poster, decor)
2. Stil t√ºr√º (abstract, modern, vintage, contemporary)
3. √úr√ºn tipi (wall hanging, art print, canvas art)
4. Tema (home decor, wall decor, artwork)

## CEVAP FORMATI
Sadece JSON formatƒ±nda yanƒ±t ver:
{
  "category_id": [se√ßilen_kategori_id],
  "category_name": "[kategori_adƒ±]",
  "confidence": [0.0-1.0_arasƒ±_g√ºven_skoru],
  "reasoning": "[kƒ±sa_a√ßƒ±klama]"
}

## √ñRNEK
{
  "category_id": 1027,
  "category_name": "Wall Hangings",
  "confidence": 0.95,
  "reasoning": "Canvas wall art ba≈ülƒ±ƒüƒ± wall hangings kategorisine tam uygun"
}
`;

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 200,
      temperature: 0.1
    });

    const responseText = response.choices[0]?.message?.content?.trim();
    
    if (!responseText) {
      throw new Error('AI yanƒ±t vermedi');
    }

    // JSON parse et
    const categoryMatch: CategoryMatch = JSON.parse(responseText);
    
    // G√ºvenlik kontrol√º: se√ßilen kategori listede var mƒ±?
    const selectedCategory = categories.find(cat => cat.id === categoryMatch.category_id);
    
    if (!selectedCategory) {
      throw new Error('AI ge√ßersiz kategori se√ßti');
    }

    console.log(`‚úÖ AI kategori se√ßti: ${categoryMatch.category_name} (G√ºven: ${categoryMatch.confidence})`);
    
    return categoryMatch;
    
  } catch (error) {
    console.error('‚ùå AI kategori e≈üle≈ütirme hatasƒ±:', error);
    return null;
  }
}

async function saveCategoryMatchResult(shopId: string, title: string, match: CategoryMatch) {
  try {
    await adminDb.collection('ai_category_matches').add({
      shop_id: shopId,
      title,
      matched_category_id: match.category_id,
      matched_category_name: match.category_name,
      confidence: match.confidence,
      reasoning: match.reasoning,
      created_at: new Date()
    });
    
    console.log('‚úÖ Kategori e≈üle≈ütirme sonucu kaydedildi');
    
  } catch (error) {
    console.error('‚ùå Kategori e≈üle≈ütirme sonucu kaydedilemedi:', error);
  }
}